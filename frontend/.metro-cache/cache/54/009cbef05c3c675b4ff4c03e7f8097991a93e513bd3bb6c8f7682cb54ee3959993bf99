{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"]}},{"name":"color","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":26,"index":67}}],"key":"WMoKxUKO/GMHeED0pzSR/dc1v7c=","exportNames":["*"]}},{"name":"./themes/v2/DarkTheme","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":68},"end":{"line":3,"column":53,"index":121}}],"key":"43Ph1iaaqvHA5W8CZ1o4iUlNnfU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = overlay;\n  exports.isAnimatedValue = void 0;\n  var _Animated = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/Animated\"));\n  var _color = _interopRequireDefault(require(_dependencyMap[2], \"color\"));\n  var _DarkTheme = require(_dependencyMap[3], \"./themes/v2/DarkTheme\");\n  const isAnimatedValue = it => it instanceof _Animated.default.Value;\n  exports.isAnimatedValue = isAnimatedValue;\n  function overlay(elevation, surfaceColor = (_MD2DarkTheme$colors => (_MD2DarkTheme$colors = _DarkTheme.MD2DarkTheme.colors) === null || _MD2DarkTheme$colors === void 0 ? void 0 : _MD2DarkTheme$colors.surface)()) {\n    if (isAnimatedValue(elevation)) {\n      const inputRange = [0, 1, 2, 3, 8, 24];\n\n      // @ts-expect-error: TS doesn't seem to refine the type correctly\n      return elevation.interpolate({\n        inputRange,\n        outputRange: inputRange.map(elevation => {\n          return calculateColor(surfaceColor, elevation);\n        })\n      });\n    }\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return calculateColor(surfaceColor, elevation);\n  }\n  function calculateColor(surfaceColor, elevation = 1) {\n    let overlayTransparency;\n    if (elevation >= 1 && elevation <= 24) {\n      overlayTransparency = elevationOverlayTransparency[elevation];\n    } else if (elevation > 24) {\n      overlayTransparency = elevationOverlayTransparency[24];\n    } else {\n      overlayTransparency = elevationOverlayTransparency[1];\n    }\n    return (0, _color.default)(surfaceColor).mix((0, _color.default)('white'), overlayTransparency * 0.01).hex();\n  }\n  const elevationOverlayTransparency = {\n    1: 5,\n    2: 7,\n    3: 8,\n    4: 9,\n    5: 10,\n    6: 11,\n    7: 11.5,\n    8: 12,\n    9: 12.5,\n    10: 13,\n    11: 13.5,\n    12: 14,\n    13: 14.25,\n    14: 14.5,\n    15: 14.75,\n    16: 15,\n    17: 15.12,\n    18: 15.24,\n    19: 15.36,\n    20: 15.48,\n    21: 15.6,\n    22: 15.72,\n    23: 15.84,\n    24: 16\n  };\n});","lineCount":66,"map":[[9,2,2,0],[9,6,2,0,"_color"],[9,12,2,0],[9,15,2,0,"_interopRequireDefault"],[9,37,2,0],[9,38,2,0,"require"],[9,45,2,0],[9,46,2,0,"_dependencyMap"],[9,60,2,0],[10,2,3,0],[10,6,3,0,"_DarkTheme"],[10,16,3,0],[10,19,3,0,"require"],[10,26,3,0],[10,27,3,0,"_dependencyMap"],[10,41,3,0],[11,2,4,7],[11,8,4,13,"isAnimatedValue"],[11,23,4,28],[11,26,4,31,"it"],[11,28,4,33],[11,32,4,37,"it"],[11,34,4,39],[11,46,4,51,"Animated"],[11,63,4,59],[11,64,4,60,"Value"],[11,69,4,65],[12,2,4,66,"exports"],[12,9,4,66],[12,10,4,66,"isAnimatedValue"],[12,25,4,66],[12,28,4,66,"isAnimatedValue"],[12,43,4,66],[13,2,5,15],[13,11,5,24,"overlay"],[13,18,5,31,"overlay"],[13,19,5,32,"elevation"],[13,28,5,41],[13,30,5,43,"surfaceColor"],[13,42,5,55],[13,45,5,58],[13,46,5,59,"_MD2DarkTheme$colors"],[13,66,5,79],[13,70,5,83],[13,71,5,84,"_MD2DarkTheme$colors"],[13,91,5,104],[13,94,5,107,"MD2DarkTheme"],[13,117,5,119],[13,118,5,120,"colors"],[13,124,5,126],[13,130,5,132],[13,134,5,136],[13,138,5,140,"_MD2DarkTheme$colors"],[13,158,5,160],[13,163,5,165],[13,168,5,170],[13,169,5,171],[13,172,5,174],[13,177,5,179],[13,178,5,180],[13,181,5,183,"_MD2DarkTheme$colors"],[13,201,5,203],[13,202,5,204,"surface"],[13,209,5,211],[13,211,5,213],[13,212,5,214],[13,214,5,216],[14,4,6,2],[14,8,6,6,"isAnimatedValue"],[14,23,6,21],[14,24,6,22,"elevation"],[14,33,6,31],[14,34,6,32],[14,36,6,34],[15,6,7,4],[15,12,7,10,"inputRange"],[15,22,7,20],[15,25,7,23],[15,26,7,24],[15,27,7,25],[15,29,7,27],[15,30,7,28],[15,32,7,30],[15,33,7,31],[15,35,7,33],[15,36,7,34],[15,38,7,36],[15,39,7,37],[15,41,7,39],[15,43,7,41],[15,44,7,42],[17,6,9,4],[18,6,10,4],[18,13,10,11,"elevation"],[18,22,10,20],[18,23,10,21,"interpolate"],[18,34,10,32],[18,35,10,33],[19,8,11,6,"inputRange"],[19,18,11,16],[20,8,12,6,"outputRange"],[20,19,12,17],[20,21,12,19,"inputRange"],[20,31,12,29],[20,32,12,30,"map"],[20,35,12,33],[20,36,12,34,"elevation"],[20,45,12,43],[20,49,12,47],[21,10,13,8],[21,17,13,15,"calculateColor"],[21,31,13,29],[21,32,13,30,"surfaceColor"],[21,44,13,42],[21,46,13,44,"elevation"],[21,55,13,53],[21,56,13,54],[22,8,14,6],[22,9,14,7],[23,6,15,4],[23,7,15,5],[23,8,15,6],[24,4,16,2],[26,4,18,2],[27,4,19,2],[27,11,19,9,"calculateColor"],[27,25,19,23],[27,26,19,24,"surfaceColor"],[27,38,19,36],[27,40,19,38,"elevation"],[27,49,19,47],[27,50,19,48],[28,2,20,0],[29,2,21,0],[29,11,21,9,"calculateColor"],[29,25,21,23,"calculateColor"],[29,26,21,24,"surfaceColor"],[29,38,21,36],[29,40,21,38,"elevation"],[29,49,21,47],[29,52,21,50],[29,53,21,51],[29,55,21,53],[30,4,22,2],[30,8,22,6,"overlayTransparency"],[30,27,22,25],[31,4,23,2],[31,8,23,6,"elevation"],[31,17,23,15],[31,21,23,19],[31,22,23,20],[31,26,23,24,"elevation"],[31,35,23,33],[31,39,23,37],[31,41,23,39],[31,43,23,41],[32,6,24,4,"overlayTransparency"],[32,25,24,23],[32,28,24,26,"elevationOverlayTransparency"],[32,56,24,54],[32,57,24,55,"elevation"],[32,66,24,64],[32,67,24,65],[33,4,25,2],[33,5,25,3],[33,11,25,9],[33,15,25,13,"elevation"],[33,24,25,22],[33,27,25,25],[33,29,25,27],[33,31,25,29],[34,6,26,4,"overlayTransparency"],[34,25,26,23],[34,28,26,26,"elevationOverlayTransparency"],[34,56,26,54],[34,57,26,55],[34,59,26,57],[34,60,26,58],[35,4,27,2],[35,5,27,3],[35,11,27,9],[36,6,28,4,"overlayTransparency"],[36,25,28,23],[36,28,28,26,"elevationOverlayTransparency"],[36,56,28,54],[36,57,28,55],[36,58,28,56],[36,59,28,57],[37,4,29,2],[38,4,30,2],[38,11,30,9],[38,15,30,9,"color"],[38,29,30,14],[38,31,30,15,"surfaceColor"],[38,43,30,27],[38,44,30,28],[38,45,30,29,"mix"],[38,48,30,32],[38,49,30,33],[38,53,30,33,"color"],[38,67,30,38],[38,69,30,39],[38,76,30,46],[38,77,30,47],[38,79,30,49,"overlayTransparency"],[38,98,30,68],[38,101,30,71],[38,105,30,75],[38,106,30,76],[38,107,30,77,"hex"],[38,110,30,80],[38,111,30,81],[38,112,30,82],[39,2,31,0],[40,2,32,0],[40,8,32,6,"elevationOverlayTransparency"],[40,36,32,34],[40,39,32,37],[41,4,33,2],[41,5,33,3],[41,7,33,5],[41,8,33,6],[42,4,34,2],[42,5,34,3],[42,7,34,5],[42,8,34,6],[43,4,35,2],[43,5,35,3],[43,7,35,5],[43,8,35,6],[44,4,36,2],[44,5,36,3],[44,7,36,5],[44,8,36,6],[45,4,37,2],[45,5,37,3],[45,7,37,5],[45,9,37,7],[46,4,38,2],[46,5,38,3],[46,7,38,5],[46,9,38,7],[47,4,39,2],[47,5,39,3],[47,7,39,5],[47,11,39,9],[48,4,40,2],[48,5,40,3],[48,7,40,5],[48,9,40,7],[49,4,41,2],[49,5,41,3],[49,7,41,5],[49,11,41,9],[50,4,42,2],[50,6,42,4],[50,8,42,6],[50,10,42,8],[51,4,43,2],[51,6,43,4],[51,8,43,6],[51,12,43,10],[52,4,44,2],[52,6,44,4],[52,8,44,6],[52,10,44,8],[53,4,45,2],[53,6,45,4],[53,8,45,6],[53,13,45,11],[54,4,46,2],[54,6,46,4],[54,8,46,6],[54,12,46,10],[55,4,47,2],[55,6,47,4],[55,8,47,6],[55,13,47,11],[56,4,48,2],[56,6,48,4],[56,8,48,6],[56,10,48,8],[57,4,49,2],[57,6,49,4],[57,8,49,6],[57,13,49,11],[58,4,50,2],[58,6,50,4],[58,8,50,6],[58,13,50,11],[59,4,51,2],[59,6,51,4],[59,8,51,6],[59,13,51,11],[60,4,52,2],[60,6,52,4],[60,8,52,6],[60,13,52,11],[61,4,53,2],[61,6,53,4],[61,8,53,6],[61,12,53,10],[62,4,54,2],[62,6,54,4],[62,8,54,6],[62,13,54,11],[63,4,55,2],[63,6,55,4],[63,8,55,6],[63,13,55,11],[64,4,56,2],[64,6,56,4],[64,8,56,6],[65,2,57,0],[65,3,57,1],[66,0,57,2],[66,3]],"functionMap":{"names":["<global>","isAnimatedValue","overlay","<anonymous>","inputRange.map$argument_0","calculateColor"],"mappings":"AAA;+BCG,kCD;eEC,4CC,wJD;kCEO;OFE;CFM;AKC;CLU"}},"type":"js/module"}]}