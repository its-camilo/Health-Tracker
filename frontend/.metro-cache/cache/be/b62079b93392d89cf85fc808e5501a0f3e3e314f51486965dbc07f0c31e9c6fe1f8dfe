{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.splitStyles = splitStyles;\n  /**\n   * Utility function to extract styles in separate objects\n   *\n   * @param styles The style object you want to filter\n   * @param filters The filters by which you want to split the styles\n   * @returns An array of filtered style objects:\n   * - The first style object contains the properties that didn't match any filter\n   * - After that there will be a style object for each filter you passed in the same order as the matching filters\n   * - A style property will exist in a single style object, the first filter it matched\n   */\n  function splitStyles(styles, ...filters) {\n    if (process.env.NODE_ENV !== 'production' && filters.length === 0) {\n      console.error('No filters were passed when calling splitStyles');\n    }\n\n    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning\n    // Entries which match the given filters will be temporarily stored in `newStyles`\n    const newStyles = filters.map(() => []);\n\n    // Entries which match no filter\n    const rest = [];\n\n    // Iterate every style property\n    outer: for (const item of Object.entries(styles)) {\n      // Check each filter\n      for (let i = 0; i < filters.length; i++) {\n        // Check if filter matches\n        if (filters[i](item[0])) {\n          newStyles[i].push(item); // Push to temporary filtered entries array\n          continue outer; // Skip to checking next style property\n        }\n      }\n\n      // Adds to rest styles if not filtered\n      rest.push(item);\n    }\n\n    // Put unmatched styles in the beginning\n    newStyles.unshift(rest);\n\n    // Convert arrays of entries into objects\n    return newStyles.map(styles => Object.fromEntries(styles));\n  }\n});","lineCount":51,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"splitStyles"],[7,21,6,19],[7,24,6,22,"splitStyles"],[7,35,6,33],[8,2,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,2,17,0],[18,11,17,9,"splitStyles"],[18,22,17,20,"splitStyles"],[18,23,17,21,"styles"],[18,29,17,27],[18,31,17,29],[18,34,17,32,"filters"],[18,41,17,39],[18,43,17,41],[19,4,18,2],[19,8,18,6,"process"],[19,15,18,13],[19,16,18,14,"env"],[19,19,18,17],[19,20,18,18,"NODE_ENV"],[19,28,18,26],[19,33,18,31],[19,45,18,43],[19,49,18,47,"filters"],[19,56,18,54],[19,57,18,55,"length"],[19,63,18,61],[19,68,18,66],[19,69,18,67],[19,71,18,69],[20,6,19,4,"console"],[20,13,19,11],[20,14,19,12,"error"],[20,19,19,17],[20,20,19,18],[20,69,19,67],[20,70,19,68],[21,4,20,2],[23,4,22,2],[24,4,23,2],[25,4,24,2],[25,10,24,8,"newStyles"],[25,19,24,17],[25,22,24,20,"filters"],[25,29,24,27],[25,30,24,28,"map"],[25,33,24,31],[25,34,24,32],[25,40,24,38],[25,42,24,40],[25,43,24,41],[27,4,26,2],[28,4,27,2],[28,10,27,8,"rest"],[28,14,27,12],[28,17,27,15],[28,19,27,17],[30,4,29,2],[31,4,30,2,"outer"],[31,9,30,7],[31,11,30,9],[31,16,30,14],[31,22,30,20,"item"],[31,26,30,24],[31,30,30,28,"Object"],[31,36,30,34],[31,37,30,35,"entries"],[31,44,30,42],[31,45,30,43,"styles"],[31,51,30,49],[31,52,30,50],[31,54,30,52],[32,6,31,4],[33,6,32,4],[33,11,32,9],[33,15,32,13,"i"],[33,16,32,14],[33,19,32,17],[33,20,32,18],[33,22,32,20,"i"],[33,23,32,21],[33,26,32,24,"filters"],[33,33,32,31],[33,34,32,32,"length"],[33,40,32,38],[33,42,32,40,"i"],[33,43,32,41],[33,45,32,43],[33,47,32,45],[34,8,33,6],[35,8,34,6],[35,12,34,10,"filters"],[35,19,34,17],[35,20,34,18,"i"],[35,21,34,19],[35,22,34,20],[35,23,34,21,"item"],[35,27,34,25],[35,28,34,26],[35,29,34,27],[35,30,34,28],[35,31,34,29],[35,33,34,31],[36,10,35,8,"newStyles"],[36,19,35,17],[36,20,35,18,"i"],[36,21,35,19],[36,22,35,20],[36,23,35,21,"push"],[36,27,35,25],[36,28,35,26,"item"],[36,32,35,30],[36,33,35,31],[36,34,35,32],[36,35,35,33],[37,10,36,8],[37,19,36,17,"outer"],[37,24,36,22],[37,25,36,23],[37,26,36,24],[38,8,37,6],[39,6,38,4],[41,6,40,4],[42,6,41,4,"rest"],[42,10,41,8],[42,11,41,9,"push"],[42,15,41,13],[42,16,41,14,"item"],[42,20,41,18],[42,21,41,19],[43,4,42,2],[45,4,44,2],[46,4,45,2,"newStyles"],[46,13,45,11],[46,14,45,12,"unshift"],[46,21,45,19],[46,22,45,20,"rest"],[46,26,45,24],[46,27,45,25],[48,4,47,2],[49,4,48,2],[49,11,48,9,"newStyles"],[49,20,48,18],[49,21,48,19,"map"],[49,24,48,22],[49,25,48,23,"styles"],[49,31,48,29],[49,35,48,33,"Object"],[49,41,48,39],[49,42,48,40,"fromEntries"],[49,53,48,51],[49,54,48,52,"styles"],[49,60,48,58],[49,61,48,59],[49,62,48,60],[50,2,49,0],[51,0,49,1],[51,3]],"functionMap":{"names":["<global>","splitStyles","filters.map$argument_0","newStyles.map$argument_0"],"mappings":"AAA;ACgB;gCCO,QD;uBEwB,oCF;CDC"}},"type":"js/module"}]}