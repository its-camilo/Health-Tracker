{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.splitStyles = splitStyles;\n  /**\n   * Utility function to extract styles in separate objects\n   *\n   * @param styles The style object you want to filter\n   * @param filters The filters by which you want to split the styles\n   * @returns An array of filtered style objects:\n   * - The first style object contains the properties that didn't match any filter\n   * - After that there will be a style object for each filter you passed in the same order as the matching filters\n   * - A style property will exist in a single style object, the first filter it matched\n   */\n  function splitStyles(styles, ...filters) {\n    if (process.env.NODE_ENV !== 'production' && filters.length === 0) {\n      console.error('No filters were passed when calling splitStyles');\n    }\n\n    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning\n    // Entries which match the given filters will be temporarily stored in `newStyles`\n    const newStyles = filters.map(() => []);\n\n    // Entries which match no filter\n    const rest = [];\n\n    // Iterate every style property\n    outer: for (const item of Object.entries(styles)) {\n      // Check each filter\n      for (let i = 0; i < filters.length; i++) {\n        // Check if filter matches\n        if (filters[i](item[0])) {\n          newStyles[i].push(item); // Push to temporary filtered entries array\n          continue outer; // Skip to checking next style property\n        }\n      }\n\n      // Adds to rest styles if not filtered\n      rest.push(item);\n    }\n\n    // Put unmatched styles in the beginning\n    newStyles.unshift(rest);\n\n    // Convert arrays of entries into objects\n    return newStyles.map(styles => Object.fromEntries(styles));\n  }\n});","lineCount":51,"map":[[7,2,11,0,"exports"],[7,9,11,0],[7,10,11,0,"splitStyles"],[7,21,11,0],[7,24,11,0,"splitStyles"],[7,35,11,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,2,11,7],[18,11,11,16,"splitStyles"],[18,22,11,27,"splitStyles"],[18,23,11,28,"styles"],[18,29,11,34],[18,31,11,36],[18,34,11,39,"filters"],[18,41,11,46],[18,43,11,48],[19,4,12,2],[19,8,12,6,"process"],[19,15,12,13],[19,16,12,14,"env"],[19,19,12,17],[19,20,12,18,"NODE_ENV"],[19,28,12,26],[19,33,12,31],[19,45,12,43],[19,49,12,47,"filters"],[19,56,12,54],[19,57,12,55,"length"],[19,63,12,61],[19,68,12,66],[19,69,12,67],[19,71,12,69],[20,6,13,4,"console"],[20,13,13,11],[20,14,13,12,"error"],[20,19,13,17],[20,20,13,18],[20,69,13,67],[20,70,13,68],[21,4,14,2],[23,4,16,2],[24,4,17,2],[25,4,18,2],[25,10,18,8,"newStyles"],[25,19,18,17],[25,22,18,20,"filters"],[25,29,18,27],[25,30,18,28,"map"],[25,33,18,31],[25,34,18,32],[25,40,18,38],[25,42,18,40],[25,43,18,41],[27,4,20,2],[28,4,21,2],[28,10,21,8,"rest"],[28,14,21,12],[28,17,21,15],[28,19,21,17],[30,4,23,2],[31,4,24,2,"outer"],[31,9,24,7],[31,11,24,9],[31,16,24,14],[31,22,24,20,"item"],[31,26,24,24],[31,30,24,28,"Object"],[31,36,24,34],[31,37,24,35,"entries"],[31,44,24,42],[31,45,24,43,"styles"],[31,51,24,49],[31,52,24,50],[31,54,24,52],[32,6,25,4],[33,6,26,4],[33,11,26,9],[33,15,26,13,"i"],[33,16,26,14],[33,19,26,17],[33,20,26,18],[33,22,26,20,"i"],[33,23,26,21],[33,26,26,24,"filters"],[33,33,26,31],[33,34,26,32,"length"],[33,40,26,38],[33,42,26,40,"i"],[33,43,26,41],[33,45,26,43],[33,47,26,45],[34,8,27,6],[35,8,28,6],[35,12,28,10,"filters"],[35,19,28,17],[35,20,28,18,"i"],[35,21,28,19],[35,22,28,20],[35,23,28,21,"item"],[35,27,28,25],[35,28,28,26],[35,29,28,27],[35,30,28,28],[35,31,28,29],[35,33,28,31],[36,10,29,8,"newStyles"],[36,19,29,17],[36,20,29,18,"i"],[36,21,29,19],[36,22,29,20],[36,23,29,21,"push"],[36,27,29,25],[36,28,29,26,"item"],[36,32,29,30],[36,33,29,31],[36,34,29,32],[36,35,29,33],[37,10,30,8],[37,19,30,17,"outer"],[37,24,30,22],[37,25,30,23],[37,26,30,24],[38,8,31,6],[39,6,32,4],[41,6,34,4],[42,6,35,4,"rest"],[42,10,35,8],[42,11,35,9,"push"],[42,15,35,13],[42,16,35,14,"item"],[42,20,35,18],[42,21,35,19],[43,4,36,2],[45,4,38,2],[46,4,39,2,"newStyles"],[46,13,39,11],[46,14,39,12,"unshift"],[46,21,39,19],[46,22,39,20,"rest"],[46,26,39,24],[46,27,39,25],[48,4,41,2],[49,4,42,2],[49,11,42,9,"newStyles"],[49,20,42,18],[49,21,42,19,"map"],[49,24,42,22],[49,25,42,23,"styles"],[49,31,42,29],[49,35,42,33,"Object"],[49,41,42,39],[49,42,42,40,"fromEntries"],[49,53,42,51],[49,54,42,52,"styles"],[49,60,42,58],[49,61,42,59],[49,62,42,60],[50,2,43,0],[51,0,43,1],[51,3]],"functionMap":{"names":["<global>","splitStyles","filters.map$argument_0","newStyles.map$argument_0"],"mappings":"AAA;OCU;gCCO,QD;uBEwB,oCF;CDC"},"hasCjsExports":false},"type":"js/module"}]}