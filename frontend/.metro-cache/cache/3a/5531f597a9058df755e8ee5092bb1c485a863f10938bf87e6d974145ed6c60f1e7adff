{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.splitStyles = splitStyles;\n  /**\n   * Utility function to extract styles in separate objects\n   *\n   * @param styles The style object you want to filter\n   * @param filters The filters by which you want to split the styles\n   * @returns An array of filtered style objects:\n   * - The first style object contains the properties that didn't match any filter\n   * - After that there will be a style object for each filter you passed in the same order as the matching filters\n   * - A style property will exist in a single style object, the first filter it matched\n   */\n  function splitStyles(styles, ...filters) {\n    if (process.env.NODE_ENV !== 'production' && filters.length === 0) {\n      console.error('No filters were passed when calling splitStyles');\n    }\n\n    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning\n    // Entries which match the given filters will be temporarily stored in `newStyles`\n    const newStyles = filters.map(() => []);\n\n    // Entries which match no filter\n    const rest = [];\n\n    // Iterate every style property\n    outer: for (const item of Object.entries(styles)) {\n      // Check each filter\n      for (let i = 0; i < filters.length; i++) {\n        // Check if filter matches\n        if (filters[i](item[0])) {\n          newStyles[i].push(item); // Push to temporary filtered entries array\n          continue outer; // Skip to checking next style property\n        }\n      }\n\n      // Adds to rest styles if not filtered\n      rest.push(item);\n    }\n\n    // Put unmatched styles in the beginning\n    newStyles.unshift(rest);\n\n    // Convert arrays of entries into objects\n    return newStyles.map(styles => Object.fromEntries(styles));\n  }\n});","lineCount":49,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,2,11,7],[16,11,11,16,"splitStyles"],[16,22,11,27,"splitStyles"],[16,23,11,28,"styles"],[16,29,11,34],[16,31,11,36],[16,34,11,39,"filters"],[16,41,11,46],[16,43,11,48],[17,4,12,2],[17,8,12,6,"process"],[17,15,12,13],[17,16,12,14,"env"],[17,19,12,17],[17,20,12,18,"NODE_ENV"],[17,28,12,26],[17,33,12,31],[17,45,12,43],[17,49,12,47,"filters"],[17,56,12,54],[17,57,12,55,"length"],[17,63,12,61],[17,68,12,66],[17,69,12,67],[17,71,12,69],[18,6,13,4,"console"],[18,13,13,11],[18,14,13,12,"error"],[18,19,13,17],[18,20,13,18],[18,69,13,67],[18,70,13,68],[19,4,14,2],[21,4,16,2],[22,4,17,2],[23,4,18,2],[23,10,18,8,"newStyles"],[23,19,18,17],[23,22,18,20,"filters"],[23,29,18,27],[23,30,18,28,"map"],[23,33,18,31],[23,34,18,32],[23,40,18,38],[23,42,18,40],[23,43,18,41],[25,4,20,2],[26,4,21,2],[26,10,21,8,"rest"],[26,14,21,12],[26,17,21,15],[26,19,21,17],[28,4,23,2],[29,4,24,2,"outer"],[29,9,24,7],[29,11,24,9],[29,16,24,14],[29,22,24,20,"item"],[29,26,24,24],[29,30,24,28,"Object"],[29,36,24,34],[29,37,24,35,"entries"],[29,44,24,42],[29,45,24,43,"styles"],[29,51,24,49],[29,52,24,50],[29,54,24,52],[30,6,25,4],[31,6,26,4],[31,11,26,9],[31,15,26,13,"i"],[31,16,26,14],[31,19,26,17],[31,20,26,18],[31,22,26,20,"i"],[31,23,26,21],[31,26,26,24,"filters"],[31,33,26,31],[31,34,26,32,"length"],[31,40,26,38],[31,42,26,40,"i"],[31,43,26,41],[31,45,26,43],[31,47,26,45],[32,8,27,6],[33,8,28,6],[33,12,28,10,"filters"],[33,19,28,17],[33,20,28,18,"i"],[33,21,28,19],[33,22,28,20],[33,23,28,21,"item"],[33,27,28,25],[33,28,28,26],[33,29,28,27],[33,30,28,28],[33,31,28,29],[33,33,28,31],[34,10,29,8,"newStyles"],[34,19,29,17],[34,20,29,18,"i"],[34,21,29,19],[34,22,29,20],[34,23,29,21,"push"],[34,27,29,25],[34,28,29,26,"item"],[34,32,29,30],[34,33,29,31],[34,34,29,32],[34,35,29,33],[35,10,30,8],[35,19,30,17,"outer"],[35,24,30,22],[35,25,30,23],[35,26,30,24],[36,8,31,6],[37,6,32,4],[39,6,34,4],[40,6,35,4,"rest"],[40,10,35,8],[40,11,35,9,"push"],[40,15,35,13],[40,16,35,14,"item"],[40,20,35,18],[40,21,35,19],[41,4,36,2],[43,4,38,2],[44,4,39,2,"newStyles"],[44,13,39,11],[44,14,39,12,"unshift"],[44,21,39,19],[44,22,39,20,"rest"],[44,26,39,24],[44,27,39,25],[46,4,41,2],[47,4,42,2],[47,11,42,9,"newStyles"],[47,20,42,18],[47,21,42,19,"map"],[47,24,42,22],[47,25,42,23,"styles"],[47,31,42,29],[47,35,42,33,"Object"],[47,41,42,39],[47,42,42,40,"fromEntries"],[47,53,42,51],[47,54,42,52,"styles"],[47,60,42,58],[47,61,42,59],[47,62,42,60],[48,2,43,0],[49,0,43,1],[49,3]],"functionMap":{"names":["<global>","splitStyles","filters.map$argument_0","newStyles.map$argument_0"],"mappings":"AAA;OCU;gCCO,QD;uBEwB,oCF;CDC"}},"type":"js/module"}]}